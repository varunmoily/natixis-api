package com.Junit.demo;

import javax.naming.LimitExceededException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

class MathCalculationTest {

	/*@Test
	public void test() {
		MathCalculation m = new MathCalculation();
		int real = m.add(10, 20);
		int actual = 30;
		assertEquals(real, actual);
	}
	@Test
	public void givingError() {
		MathCalculation m = new MathCalculation();
		int real = m.add(10, 20);
		int actual = 40;
		assertEquals(real, actual);
	}
	@Test
	public void demo3() {
		MathCalculation m = new MathCalculation();
		int real = m.add(10, 20);
		int actual = 30;
		boolean res = actual==real?true:false;
		assertTrue(res);
	}
	@Test
	public void demo4() {
		MathCalculation m = new MathCalculation();
		int real = m.add(10, 20);
		int actual = 40;
		boolean res = actual==real?true:false;
		assertFalse(res);
	}
	
	static MathCalculation mathCal;
	
	@BeforeEach
	void setUp() {
		mathCal = new MathCalculation(); 
	}
	
	@Test
	public void checkAddForPosNos() {
		
		assertAll(
				()->assertEquals(300,mathCal.add(100, 200)),
				()->assertEquals(300,mathCal.add(100, 200)),
				()->assertEquals(300,mathCal.add(100, 200)),
				()->assertEquals(300,mathCal.add(100, 200))
				);
	}
	*/
	@Test
	public void balanceCheck() {
		BankAccount b = new BankAccount("varun",50000);
		assertThrows(LimitExceededException.class, ()->b.deposit(10000));
		
	}
	@Test
	public void balance() throws LimitExceededException {
		BankAccount b1 = new BankAccount("arun",25000);
		assertEquals(3000,b1.deposite(5000));
	}
	
	@Test
	public void withdraw() throws WithdrawException {
		BankAccount w = new BankAccount("arun",25000);
		ass(WithdrawException.class, ()->w.withdraw(30000));
	}
	
	@Test
	public void withdraw1() throws WithdrawException {
		BankAccount w = new BankAccount("arun",25000);
		assertEquals(20000,w.withdraw1(5000));
	}
	
}